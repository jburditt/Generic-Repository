GlobalContext.cs
namespace WBS.DAL
{
    public class GlobalContext : DbContext
    {
        public DbSet<province_tax> province_taxes { get; set; }

        public GlobalContext() : base("GlobalEntities")
        {
            Database.SetInitializer<GlobalContext>(null);
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            modelBuilder.Conventions.Remove<PluralizingTableNameConvention>();
            modelBuilder.Entity<province_tax>().ToTable("province_tax");
        }
    }
}

GlobalEntities.cs
using System;

namespace WBS.Models.Global
{
    public class province_tax
    {
        // table columns
        public int id { get; set; }

        public int province_id { get; set; }

        public double gst_rate { get; set; }

        public double pst_rate { get; set; }

        public double qst_rate { get; set; }

        public double hst_rate { get; set; }

        public DateTime? effective_dt { get; set; }

        public DateTime? expiry_dt { get; set; }

        public decimal GST { get { return (decimal)gst_rate; } }

        public decimal PST { get { return (decimal)pst_rate; } }

        public decimal QST { get { return (decimal)qst_rate; } }

        public decimal HST { get { return (decimal)hst_rate; } }

        public decimal GetRate()
        {
            return (decimal)(gst_rate + pst_rate + qst_rate + hst_rate);
        }
    }
}

AddressBLL.cs
using System;
using System.Linq;
using WBS.DAL;
using WBS.Models.Data;
using WBS.Models.Global;
using WBS.Models.Data.DTO;

namespace WBS.BLL
{
    public class AddressBLL : BaseController<address, addressDTO>
    {
        #region Taxes

        //TODO: Reassess this function. It is EF code outside of EFRepository but currently EFRepository only support WBSContext.
        public static province_tax GetTaxByProvinceId(int provinceId)
        {
            using (var db = new GlobalContext())
            {
                var tax = db.province_taxes.FirstOrDefault(
                    t => t.province_id == provinceId
                    && t.effective_dt <= DateTime.Now
                    && (t.expiry_dt == null || t.expiry_dt > DateTime.Now));

                return tax ?? new province_tax
                {
                    gst_rate = 0,
                    hst_rate = 0,
                    pst_rate = 0,
                    qst_rate = 0
                };
            }
        }

        #endregion Taxes
    }
}
